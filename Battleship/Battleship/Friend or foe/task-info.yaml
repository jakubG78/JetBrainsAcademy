type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Battleship.java
  visible: true
  text: |+
    package battleship;

    import java.util.Objects;
    import java.util.Scanner;

    public class Battleship {

        private final String[][] gameField = new String[11][11]; //create game field as 2-nested array
        private final String[][] fogGameField = new String[11][11]; //to fog the battle-ship, we show the shots on that
        public final String name;

        public Battleship(String name) { // when the class have instantiated, the game fields are filled
            this.name = name;
            initializeField(gameField);
            initializeField(fogGameField);
        }

        public void takeAShoot(String[][] field) { // take a shot to the field of opponent player
            Scanner scanner = new Scanner(System.in);
            System.out.printf("%s, it's your turn:\n", this.name);

            String coordinateOfShoot = scanner.nextLine(); // get the coordinate from user
            String first = coordinateOfShoot.replaceAll("[^A-Za-z]", ""); // this part equals to row, but type must be converted to int
            String second = coordinateOfShoot.replaceAll("[^0-9]", ""); // this part equals to column, but type must be converted to int

            int row = ((int) first.charAt(0)) - 64; // from string row to int row
            int column = Integer.parseInt(second); // from string column to int column

            try {
                // if we are out of range then trow an out-of-bounds exception
                if (row == 0 || row == 11 || column == 0 || column == 11) {
                    throw new ArrayIndexOutOfBoundsException();
                }
                // this part evaluate if we do it successfully or not
                if (Objects.equals(field[row][column], "O ") || Objects.equals(field[row][column], "X ")) {
                    field[row][column] = "X "; // fill the gameField
                    fogGameField[row][column] = "X "; // fill the fogGameField

                    if (isSunkShip(row, column, field)) { // pass the current hit coordinate
                        // if we hit ship then we also check this ship is the last or not
                        if (isLastShip(field)) {
                            System.out.println("You sank the last ship. You won. Congratulations!");
                        }
                        System.out.println("You sank a ship!");
                    } else
                        System.out.println("You hit a ship!");

                }
                else {
                    field[row][column] = "M "; // fill the gameField with "M " because we missed
                    fogGameField[row][column] = "M "; // also, we filled fog area

                    System.out.println("You missed!");


                }
            } catch (ArrayIndexOutOfBoundsException e){ // print the message if we get any ArrayIndexOutOfBoundsException
                System.out.println("Error! You entered the wrong coordinates! Try again:");
            }
        }

        // check the ship that we are sinking is the last ship or not
        public boolean isLastShip(String[][] field) {
            boolean notLastShip = false;
            for (int i = 1; i < 11; i++) {
                for (int j = 1; j < 11; j++) {

                    if (Objects.equals(field[i][j], "O ")) { // make sure we do not contain any ship which is not hit
                        notLastShip = true;
                        break;
                    }

                }
            }
            return !notLastShip;
        }

        //is the corresponding ship sunk
        private boolean isSunkShip(int row, int column, String[][] field) {
            boolean checkRowFront = false, checkRowBack = false, checkColumnFront = false, checkColumnBack = false;

            // we check the all front row coordinates to check if game field contain any "O " until reaching bound, "M " or "~ " sign
            int i = row - 1;
            while (i >= 0 && !field[i][column].equals("M ") && !field[i][column].equals("~ ")) {
                if (field[i][column].equals("O ")) {
                    checkRowFront = true;
                    break;
                }
                i--;
            }

            // we check the all behind row coordinates to check if game field contain any "O " until reaching bound, "M " or "~ " sign
            int j = row + 1;
            while (j <= 10 && !field[j][column].equals("M ") && !field[j][column].equals("~ ")) {
                if (field[j][column].equals("O ")) {
                    checkRowBack = true;
                    break;
                }
                j++;
            }

            // we check the all front column coordinates to check if game field contain any "O " until reaching bound, "M " or "~ " sign
            int k = column - 1;
            while (k >= 0 && !field[row][k].equals("M ") && !field[row][k].equals("~ ")) {
                if (field[row][k].equals("O ")) {
                    checkColumnFront = true;
                    break;
                }
                k--;
            }

            // we check the all behind column coordinates to check if game field contain any "O " until reaching bound, "M " or "~ " sign
            int m = column + 1;
            while (m <= 10 && !field[row][m].equals("M ") && !field[row][m].equals("~ ")) {
                if (field[row][m].equals("O ")) {
                    checkColumnBack = true;
                    break;
                }
                m++;
            }

            // if the all checks are false, this means that we hit ship, and we return true
            return !(checkRowBack || checkRowFront || checkColumnBack || checkColumnFront);
        }

        public void destroyer() {
            AutomaticFillAndPrint(" Destroyer", 2);
        }

        public void cruiser() {
            AutomaticFillAndPrint(" Cruiser ", 3);
        }

        public void submarine() {
            AutomaticFillAndPrint(" Submarine", 3);
        }

        public void battleship() {
            AutomaticFillAndPrint( " Battleship", 4);
        }

        public void aircraftCarrier() {
            AutomaticFillAndPrint(" Aircraft Carrier",5);
        }

        // check the condition if condition is satisfied then fill and print the game field
        private void AutomaticFillAndPrint(String name, int cell) {

            Scanner scanner = new Scanner(System.in);
            System.out.printf("Enter the coordinates of the %s (%d cells):\n", name, cell);

            while (true) { // loop until valid coordinates are entered
                String coordinates = scanner.nextLine(); // get the coordinate from the user

                // parse the coordinate to make manipulating gameField array easy
                String[] coordinate = coordinates.split(" ");
                String first = coordinate[0].replaceAll("[^A-Za-z]", ""); //F
                String second = coordinate[0].replaceAll("[^0-9]", ""); //3
                String third = coordinate[1].replaceAll("[^A-Za-z]", ""); //F
                String fourth = coordinate[1].replaceAll("[^0-9]", ""); // 7


                // transform the char into int value, then subtract 64. that is  A(65) - 64 = 1, B(66) - 64 = 2, and so on..
                int row1 = ((int) first.charAt(0)) - 64; //6, that is F - 64
                int column1 = Integer.parseInt(second);//3
                int row2 = ((int) third.charAt(0)) - 64;//6, that is F - 64
                int column2 = Integer.parseInt(fourth);//7

                // check if coordinates are increasing order of not, because the condition of for loops in fillGameField() method must be satisfied properly
                if (column1 > column2) {
                    int temp = column1;
                    column1 = column2;
                    column2 = temp;
                }
                else if (row1 > row2){
                    int temp = row1;
                    row1 = row2;
                    row2 = temp;
                }


                // accept only horizontal or vertical location
                if (isWrongLocation(row1, row2, column1, column2)) {
                    System.out.println("Error! Wrong ship location! Try again:");
                }

                else if (isTooClose(row1, row2, column1, column2)) {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                }
                else if ((Math.abs((row1 - row2)) == cell - 1 && Math.abs((column1 - column2)) == 0 || // checking vertically matching
                        (Math.abs((row1 - row2)) == 0 && Math.abs((column1 - column2)) == cell - 1))) {

                    fillGameField(row1, row2, column1, column2);
                    printField(gameField);
                    break;
                }// checking horizontally matching{
                // we have to fill the game field according to two directions(only vertical or horizontal) and cell
                else {
                    System.out.printf("Error! Wrong length of the %s! Try again:\n", name);
                }

            }
        }

        // accept only horizontal or vertical location, that is we only accept either row1 == row2 or column1 == column2
        private static boolean isWrongLocation(int row1, int row2, int column1, int column2) {
            return (row1 != row2) && (column1 != column2);
        }

        // if there are any war-ship ahead or behind the current war-ship, we are not allowed to place the current war-ship in that coordinates
        private boolean isTooClose(int row1, int row2, int column1, int column2) {
            boolean checkRow1, checkRow2, checkColumn1, checkColumn2; // declare the part of conditions

            checkRow1 = Objects.equals(gameField[row1 - 1][column1], "O ");
            checkColumn1 = Objects.equals(gameField[row1][column1 -1], "O ");

            if(column2 == 10) { // if column2 (on the left of the game field) exceeds the range we may say that there isn't any "O ", so we can place in point of column2
                checkColumn2 = false; // there is no matching, that is Objects.equals(gameField[row2][column2], "O ") == false;
            }
            else {
                checkColumn2 = Objects.equals(gameField[row2][column2 + 1], "O "); // otherwise, check if this place is suitable for placement
            }
            if (row2 == 10) { // if row2 (on the bottom of the game field) exceeds the range we may say that there isn't any "O ", so we can place in point of row2
                checkRow2 = false; // there is no matching, that is Objects.equals(gameField[row2][column2], "O ") == false;
            }
            else {
                checkRow2 = Objects.equals(gameField[row2 + 1][column2], "O "); // otherwise, check if this place is suitable for placement
            }

            return (
                    !(
                            ((column1 == column2) && !(checkRow1 || checkRow2)) ||
                                    ((row1 == row2) && !(checkColumn1 || checkColumn2))
                    )
            );
        }


        private void fillGameField(int row1, int row2, int column1, int column2) {

            for (int i = row1; i <= row2; i++) {
                for (int j = column1; j <= column2; j++) {
                    gameField[i][j] = "O ";
                }
            }
        }

        public static void printField(String[][] field) {
            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    System.out.print(field[i][j]);
                }
                System.out.println();
            }
        }

        public void initializeField(String[][] field) { // initialize the taken fields

            for (int i = 0; i < 11; i++) {
                for (int j = 0; j < 11; j++) {
                    if (i == 0 && j != 0) { // fill the first row with number from 1 to 10
                        field[i][j] = String.format("%d ", j);
                    }
                    else if (i != 0 && j == 0) { // fill the first column with 'A' to 'J'
                        field[i][j] = String.format("%c ", (char) (i + 64));
                    }
                    else if (i != 0){ // we initialize the other fields with "~" symbol
                        field[i][j] = "~ ";
                    }
                    else {
                        field[0][0] = "  ";
                    }
                }
            }
        }

        public String[][] getGameField() {
            return gameField;
        }

        public String[][] getFogGameField() {
            return fogGameField;
        }
    }
    Footer
            © 2022 GitHub, Inc.
            Footer navigation

            Terms
            Privacy
            Security
            Status
            Docs
            Contact GitHub
            Pricing
            API
            Training
            Blog
            About

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Tue, 20 Dec 2022 19:45:38 UTC"
record: -1
